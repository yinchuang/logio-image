---
kind: ConfigMap
apiVersion: v1
metadata:
  namespace: custom
  name: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log;
    pid /run/nginx.pid;
    
    include /usr/share/nginx/modules/*.conf;
    
    events {
        worker_connections 10240;
    }
    
    http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';
    
        access_log  /var/log/nginx/access.log  main;
    
        sendfile            on;
        tcp_nopush          on;
        tcp_nodelay         on;
        keepalive_timeout   65;
        types_hash_max_size 2048;
    
        include             /etc/nginx/mime.types;
        default_type        application/octet-stream;

        gzip on;
        gzip_comp_level 2;
        gzip_proxied any;
        gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/json;

        server_tokens off; 
    
        include /etc/nginx/conf.d/*.conf;
    
        server {
            listen       80 default_server;
            listen       [::]:80 default_server;
            server_name  _;
            client_max_body_size 300m;
            root         /usr/share/nginx/html;
    
            include /etc/nginx/default.d/*.conf;
    
            location / {
                root   /opt/vue/dist;
                index  index.html;
                try_files $uri $uri/ /index.html;
            }

            error_page 404 /404.html;
                location = /40x.html {
            }
    
            error_page 500 502 503 504 /50x.html;
                location = /50x.html {
            }
        }
    
    }

  harvester.conf: |
    exports.config = {
      nodeName: "nginx",
      logStreams: {
        nginx: [
          "/var/log/nginx/access.log",
          "/var/log/nginx/error.log"
        ]
      },
      server: {
        host: 'logio.xxx.xxx',
        port: 28777
      }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: custom
  labels:
    app: nginx
spec:
  ports:
    - name: nginx
      protocol: TCP
      port: 80
      targetPort: 80
  selector:
    app: nginx
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: custom
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      volumes:
        - name: nginx
          configMap:
            name: nginx
            items:
              - key: nginx.conf
                path: nginx.conf
              - key: harvester.conf 
                path: harvester.conf
        - name: app-logs
          emptyDir: {}
      containers:
        - name: logio
          image: xxx.xxx.xxx/logio-harvester:latest
          imagePullPolicy: Always
          volumeMounts:
            - name: nginx
              mountPath: /root/.log.io/harvester.conf 
              subPath: harvester.conf
            - name: app-logs
              mountPath: /var/log/nginx
              readOnly: true
          resources:
            requests:
              memory: "20Mi"
              cpu: "25m"
            limits:
              memory: "30Mi"
              cpu: "50m"
        - name: nginx
          image: xxx.xxx.xxx/nginx:1.16.1 
          imagePullPolicy: Always 
          ports:
            - protocol: TCP
              containerPort: 80
          volumeMounts:
            - name: nginx
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: app-logs
              mountPath: /var/log/nginx
          resources:
            requests:
              memory: "100Mi"
              cpu: "50m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      imagePullSecrets:
        - name: aliyun
      dnsPolicy: ClusterFirst
      restartPolicy: Always
---
